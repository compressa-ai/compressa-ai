"use strict";(self.webpackChunkcompressa_docs=self.webpackChunkcompressa_docs||[]).push([[592],{449:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var s=a(4848),t=a(8453);const o={sidebar_position:1,title:"Python SDK (Langchain)",sidebar_class_name:"docs_sidebar_index"},r="Quick Start: Python SDK (Langchain)",i={id:"docs/Quickstart/langchain",title:"Python SDK (Langchain)",description:"In this guide, we will show you how to quickly get started with the four key components of our platform:",source:"@site/docs/docs/Quickstart/langchain.md",sourceDirName:"docs/Quickstart",slug:"/docs/Quickstart/langchain",permalink:"/en/docs/Quickstart/langchain",draft:!1,unlisted:!1,editUrl:"https://github.com/compressa-ai/compressa-ai.github.io/edit/main/docs/docs/Quickstart/langchain.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Python SDK (Langchain)",sidebar_class_name:"docs_sidebar_index"},sidebar:"docsSidebar",previous:{title:"Quickstart",permalink:"/en/docs/Quickstart/"},next:{title:"REST API",permalink:"/en/docs/Quickstart/REST_API"}},c={},l=[{value:"Installation",id:"installation",level:2},{value:"Importing Compressa Models",id:"importing-compressa-models",level:2},{value:"Obtaining an API Key",id:"obtaining-an-api-key",level:2},{value:"Environment Setup",id:"environment-setup",level:2},{value:"CompressaChunking",id:"compressachunking",level:2},{value:"CompressaEmbeddings",id:"compressaembeddings",level:2},{value:"ChatCompressa",id:"chatcompressa",level:2},{value:"CompressaRerank",id:"compressarerank",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"quick-start-python-sdk-langchain",children:"Quick Start: Python SDK (Langchain)"}),"\n",(0,s.jsx)(n.p,{children:"In this guide, we will show you how to quickly get started with the four key components of our platform:"}),"\n",(0,s.jsx)(n.p,{children:"CompressaChunking (for splitting docs into chunks)\nCompressaEmbeddings (for creating text vectors)\nChatCompressa (LLM chat model)\nCompressaRerank (for improving search results)"}),"\n",(0,s.jsx)(n.p,{children:"By using these tools together with Langchain, you can create custom RAG assistants."}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(n.p,{children:["First, install the ",(0,s.jsx)(n.code,{children:"langchain-compressa"})," library:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"pip install langchain-compressa\n"})}),"\n",(0,s.jsx)(n.h2,{id:"importing-compressa-models",children:"Importing Compressa Models"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from langchain_compressa import CompressaEmbeddings\nfrom langchain_compressa import ChatCompressa\nfrom langchain_compressa.reranks import CompressaRerank\n"})}),"\n",(0,s.jsx)(n.h2,{id:"obtaining-an-api-key",children:"Obtaining an API Key"}),"\n",(0,s.jsxs)(n.p,{children:["To use Compressa, you will need an API key. You can obtain it after ",(0,s.jsx)(n.a,{href:"https://compressa.ai/form",children:"registration"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"environment-setup",children:"Environment Setup"}),"\n",(0,s.jsx)(n.p,{children:"After receiving the key, set it as an environment variable:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import os\nos.environ["COMPRESSA_API_KEY"] = "your_key_here"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Replace ",(0,s.jsx)(n.code,{children:'"your_key_here"'})," with your actual API key."]}),"\n",(0,s.jsx)(n.h2,{id:"compressachunking",children:"CompressaChunking"}),"\n",(0,s.jsx)(n.p,{children:"CompressaChunking tool allows you to extract text from documents and split it into small chunks. Later, we will search for the most relevant chunks according to the user's query to provide an accurate answer."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Download a russian PDF file as an example, designed for marketplace employees: \npdf_url = "https://docs.ozon.ru/company/attachments/6828150/6828198.pdf"\npdf_response = requests.get(pdf_url)\n\n# Save the file\nwith open("ozon_guide.pdf", "wb") as file:\n    file.write(pdf_response.content)\n\n# Send the file for chunking\ncompressa_url = "https://compressa-api.mil-team.ru/v1/layout"\nheaders = {\n    "Authorization": f"Bearer {os.environ[\'COMPRESSA_API_KEY\']}",\n    "accept": "application/json",\n}\n\n# specify the path to our file\nfiles = {"files": open("ozon_guide.pdf", "rb")}\n\n# set chunking parameters\ndata = {\n    "output_format": "application/json",\n    "coordinates": "false",\n    "strategy": "auto",\n    "languages": ["rus", "eng"]\n}\n\nresponse = requests.post(\n    compressa_url,\n    headers=headers,\n    files=files,\n    data=data\n)\n\n# Output the document chunks in JSON format\nprint(response.json())\n'})}),"\n",(0,s.jsxs)(n.p,{children:["To learn more about the CompressaChunking settings through practical examples, check out ",(0,s.jsx)(n.a,{href:"/guides/langchain_advanced_chunking/",children:"our guide."})]}),"\n",(0,s.jsx)(n.h2,{id:"compressaembeddings",children:"CompressaEmbeddings"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"CompressaEmbeddings"})," model allows you to create vector representations (embeddings) for texts. This is useful for semantic search and other natural language processing tasks (e.g., classification)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from langchain_compressa.embeddings import CompressaEmbeddings\n\nembeddings = CompressaEmbeddings()\n\n# Create an embedding for a single query\nquery_embedding = embeddings.embed_query("How to cook borscht?")\n\n# Create embeddings for multiple documents\ndocs_embeddings = embeddings.embed_documents([\n    "Borscht is a traditional Slavic soup",\n    "Beetroot is needed to make borscht",\n    "Borscht is usually served with sour cream",\n    "Meat is often added to borscht",\n    "Borscht has a characteristic red color"\n])\n\n# Asynchronous embedding creation\n\nawait embeddings.aembed_query("How to cook borscht?")\n\nawait = embeddings.aembed_documents([\n    "Borscht is a traditional Slavic soup",\n    "Beetroot is needed to make borscht",\n    "Borscht is usually served with sour cream",\n    "Meat is often added to borscht",\n    "Borscht has a characteristic red color"\n])\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If you want to dive deeper into Embeddings and understand how semantic search is technically structured, check out our ",(0,s.jsx)(n.a,{href:"/guides/langchain_basic_semantic_search/",children:"practical guide"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"chatcompressa",children:"ChatCompressa"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ChatCompressa"})," is a fast and cost-effective LLM with support for the Russian language."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from langchain_compressa import ChatCompressa\n\nllm = ChatCompressa(temperature=0.5)\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can invoke the LLM in a simple way:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'messages = [\n    ("system", "You are a helpful assistant that translates from Russian to English. Translate the user\'s sentence."),\n    ("human", "I love programming.")\n]\nai_msg = llm.invoke(messages)\nprint(f"Model\'s response: {ai_msg.content}")\n'})}),"\n",(0,s.jsx)(n.p,{children:"Or use the LLM in a chain with a prompt template:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from langchain_core.prompts import ChatPromptTemplate\n\nprompt = ChatPromptTemplate.from_messages(\n    [\n        (\n            "system",\n            "You are a helpful assistant that translates from {input_language} to {output_language}.",\n        ),\n        ("human", "{input}"),\n    ]\n)\n\nchain = prompt | llm\nresult = chain.invoke(\n    {\n        "input_language": "Russian",\n        "output_language": "English",\n        "input": "I love programming.",\n    }\n)\n\nprint(f"Chain result: {result.content}")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"compressarerank",children:"CompressaRerank"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"CompressaRerank"})," allows you to re-rank documents based on their relevance to a given query."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from langchain_core.documents import Document\nfrom langchain_compressa.reranks import CompressaRerank\n\n# Create a list of documents in Langchain format, adding metadata\n\ndocuments = [\n    Document(\n        page_content="""Carson City is the capital of the American state of Nevada.\n        According to the 2010 US Census, the population of Carson City was 55,274.""",\n        metadata={"source": "https://example.com/1"}\n    ),\n    Document(\n        page_content="""The Commonwealth of the Northern Mariana Islands is a group of islands in the Pacific Ocean,\n        which is a political division controlled by the United States. The capital is Saipan.""",\n        metadata={"source": "https://example.com/2"}\n    ),\n    Document(\n        page_content="""Charlotte Amalie is the capital and largest city of the US Virgin Islands.\n        It has a population of about 20,000. The city is located on the island of St. Thomas.""",\n        metadata={"source": "https://example.com/3"}\n    ),\n    Document(\n        page_content="""Washington, D.C. (also known simply as Washington or D.C., and officially as the District of Columbia) is the capital of the United States.\n        It is a federal district. The residence of the US President and many major government institutions are located there,\n        making it the political center of the United States.""",\n        metadata={"source": "https://example.com/4"}\n    ), \n    Document(\n        page_content="""Capital punishment existed in the United States even before the United States became a country.\n        As of 2017, the death penalty is allowed in 30 out of 50 states. The federal government (including the US armed forces) also\n        applies the death penalty.""",\n        metadata={"source": "https://example.com/5"}\n    )\n]\n\nquery = "What is the capital of the United States?"\n\n# Define our re-ranking model\nreranker = CompressaRerank()\n\n# Apply CompressaRerank to re-rank the documents for the user\'s query\ncompress_res = reranker.compress_documents(query=query, documents=documents)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The benefits of re-ranking are easier to understand when working with a large number of documents. We have prepared a ",(0,s.jsx)(n.a,{href:"/guides/langchain_basic_rerank/",children:"separate guide"}),", where we improve keyword search accuracy using CompressaRerank."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>i});var s=a(6540);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);