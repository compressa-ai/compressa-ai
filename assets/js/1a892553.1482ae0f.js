"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[675],{3745:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var t=s(4848),o=s(8453);const i={sidebar_position:3,title:"Transition from OpenAI",sidebar_class_name:"docs_sidebar_index"},r=void 0,a={id:"docs/api-reference/openai",title:"Transition from OpenAI",description:"The Compsessa API is OpenAI compliant.",source:"@site/docs/docs/api-reference/openai.md",sourceDirName:"docs/api-reference",slug:"/docs/api-reference/openai",permalink:"/docs/api-reference/openai",draft:!1,unlisted:!1,editUrl:"https://github.com/compressa-ai/compressa-ai.github.io/edit/main/docs/docs/api-reference/openai.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Transition from OpenAI",sidebar_class_name:"docs_sidebar_index"},sidebar:"docsSidebar",previous:{title:"REST API",permalink:"/docs/api-reference/rest"}},c={},p=[];function d(e){const n={br:"br",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The Compsessa API is OpenAI compliant.",(0,t.jsx)(n.br,{}),"\n","So you can just use the OpenAI package with our endpoints"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# install openai from PyPI\npip install openai\n"})}),"\n",(0,t.jsx)(n.p,{children:"First, set next environment variables:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'COMPRESSA_BASE=https://compressa-api.mil-team.ru/v1\nEMBED_MODEL=/app/resources/models/models/Salesforce_SFR-Embedding-Mistral\nCHAT_MODEL=/app/resources/models/models/compressa-ai_Llama-3-8B-Instruct\nTIKTOKEN_MODEL=Salesforce/SFR-Embedding-Mistral\nENCODING_FORMAT=float\nCOMPRESSA_API_KEY=<"your_compressa_key_here">\n'})}),"\n",(0,t.jsx)(n.p,{children:"And next, just use:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from openai import OpenAI  # version openai >= 1.0\nimport os\n\nfrom dotenv import load_dotenv\nload_dotenv()\n\nCOMPRESSA_API_KEY=os.getenv("COMPRESSA_API_KEY")\nCOMPRESSA_BASE=os.getenv("COMPRESSA_BASE")  # Our API Endpoint\nCHAT_MODEL=os.getenv("CHAT_MODEL")\nEMBED_MODEL=os.getenv("EMBED_MODEL")\nENCODING_FORMAT=os.getenv("ENCODING_FORMAT")\n\nclient = OpenAI(api_key = COMPRESSA_API_KEY, base_url = COMPRESSA_BASE)\n\nchat_completion = client.chat.completions.create(\n    messages=[\n        {\n            "role": "user",\n            "content": "Say this is a test",\n        }\n    ],\n    model=CHAT_MODEL,\n)\n\nprint(chat_completion)\n\nembedding = client.embeddings.create(\n    model=EMBED_MODEL,\n    input="What is the capital of the United States?",\n    encoding_format=ENCODING_FORMAT\n)\n\nprint(embedding)\n'})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var t=s(6540);const o={},i=t.createContext(o);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);