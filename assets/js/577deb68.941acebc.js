"use strict";(self.webpackChunkcompressa_docs=self.webpackChunkcompressa_docs||[]).push([[501],{2928:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var t=a(4848),s=a(8453);const i={sidebar_position:1},o="Quickstart: Langchain Compressa",r={id:"guides/langchain/index",title:"Quickstart: Langchain Compressa",description:"This guide shows how to use Compressa into langchain.",source:"@site/docs/guides/langchain/index.md",sourceDirName:"guides/langchain",slug:"/guides/langchain/",permalink:"/guides/langchain/",draft:!1,unlisted:!1,editUrl:"https://github.com/compressa-ai/compressa-ai.github.io/edit/main/docs/guides/langchain/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"guidesSidebar",next:{title:"Quickstart: On-Premises InsightStream",permalink:"/guides/insight-stream/"}},c={},l=[{value:"Installation",id:"installation",level:2},{value:"Imports",id:"imports",level:2},{value:"Environment Setup",id:"environment-setup",level:2},{value:"CompressaEmbeddings",id:"compressaembeddings",level:2},{value:"ChatCompressa",id:"chatcompressa",level:2},{value:"CompressaRerank",id:"compressarerank",level:2},{value:"RAG example",id:"rag-example",level:2}];function m(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"quickstart-langchain-compressa",children:"Quickstart: Langchain Compressa"}),"\n",(0,t.jsx)(n.p,{children:"This guide shows how to use Compressa into langchain."}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"pip install git+https://github.com/insight-stream/langchain_compressa.git\n"})}),"\n",(0,t.jsx)(n.h2,{id:"imports",children:"Imports"}),"\n",(0,t.jsx)(n.p,{children:"langchain compressa is a platform that offers:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"from langchain_compressa import CompressaEmbeddings\nfrom langchain_compressa import ChatCompressa\nfrom langchain_compressa.reranks import CompressaRerank\n"})}),"\n",(0,t.jsx)(n.h2,{id:"environment-setup",children:"Environment Setup"}),"\n",(0,t.jsx)(n.p,{children:"Make sure to set the following environment variable:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"COMPRESSA_API_KEY"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import os\nos.environ["COMPRESSA_API_KEY"] = "your_key_here"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"compressaembeddings",children:"CompressaEmbeddings"}),"\n",(0,t.jsx)(n.p,{children:"langchain compressa provide work with Compressa embedding models."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from langchain_compressa.embeddings import CompressaEmbeddings\n\nembeddings = CompressaEmbeddings()\n\nembeddings.embed_query("My query to look up")\n\nembeddings.embed_documents(\n    ["This is a content of the document", "This is another document"]\n)\n# async embed query\nawait embeddings.aembed_query("My query to look up")\n\n# async embed documents\nawait embeddings.aembed_documents(\n    ["This is a content of the document", "This is another document"]\n)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"chatcompressa",children:"ChatCompressa"}),"\n",(0,t.jsx)(n.p,{children:"We can instantiate our model object and generate chat completions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from langchain_compressa import ChatCompressa\n\nllm = ChatCompressa(\n    temperature=0\n)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Invocation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'messages = [\n    (\n        "system",\n        "You are a helpful assistant that translates English to French. Translate the user sentence.",\n    ),\n    ("human", "I love programming."),\n]\nai_msg = llm.invoke(messages)\nai_msg\n'})}),"\n",(0,t.jsx)(n.p,{children:"Chaining"}),"\n",(0,t.jsx)(n.p,{children:"We can chain our model with a prompt template like so:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from langchain_core.prompts import ChatPromptTemplate\n\nprompt = ChatPromptTemplate.from_messages(\n    [\n        (\n            "system",\n            "You are a helpful assistant that translates {input_language} to {output_language}.",\n        ),\n        ("human", "{input}"),\n    ]\n)\n\nchain = prompt | llm\nchain.invoke(\n    {\n        "input_language": "English",\n        "output_language": "German",\n        "input": "I love programming.",\n    }\n)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"compressarerank",children:"CompressaRerank"}),"\n",(0,t.jsx)(n.p,{children:"We can rerank documents via Compressa and langchain."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from langchain_core.documents import Document\nfrom langchain_compressa.reranks import CompressaRerank\n\n#First, let\'s set a list of standard langchain documents\n\ndocuments = [\n    Document(\n        page_content="""Carson City is the capital city of the American state of Nevada. \n        At the 2010 United States Census, Carson City had a population of 55,274.""",\n        metadata={"source": "https://example.com/1"}\n    ),\n    Document(\n        page_content="""The Commonwealth of the Northern Mariana Islands is a group of islands \n        in the Pacific Ocean that are a political division controlled by the United States. \n        Its capital is Saipan.""",\n        metadata={"source": "https://example.com/2"}\n    ),\n    Document(\n        page_content="""Charlotte Amalie is the capital and largest city of the United States \n        Virgin Islands. It has about 20,000 people. The city is on the island of Saint Thomas.""",\n        metadata={"source": "https://example.com/3"}\n    ),\n    Document(\n        page_content="""Washington, D.C. (also known as simply Washington or D.C., and \n        officially as the District of Columbia) is the capital of the United States. \n        It is a federal district. The President of the USA and many major national government offices \n        are in the territory. This makes it the political center of the United States of America.""",\n        metadata={"source": "https://example.com/4"}\n    ), \n    Document(\n        page_content="""Capital punishment (the death penalty) has existed in the United States \n        since before the United States was a country. As of 2017, capital punishment is legal \n        in 30 of the 50 states. The federal government (including the United States military) \n        also uses capital punishment.""",\n        metadata={"source": "https://example.com/5"}\n    )\n]\n\nquery = "What is the capital of the United States?"\n\n#Next, we define a reranker\nreranker = CompressaRerank()\n\n#And then we can rerank the documents for the question\nrerank_res = reranker.rerank(query=query,  documents=documents, top_n=3)\ncompress_res = reranker.compress_documents(query=query,  documents=documents)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"rag-example",children:"RAG example"}),"\n",(0,t.jsx)(n.p,{children:"RAG (Retrieval Augmented Generation) is a method of working with large language models when the request context\nadditional information is programmatically added to the language model, on the basis of which the language model\ncan give the user a more complete and accurate answer."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import os\nfrom langchain_compressa import CompressaEmbeddings, ChatCompressa\nfrom langchain_core.documents import Document\nfrom langchain.chains.combine_documents import create_stuff_documents_chain\nfrom langchain.chains import create_retrieval_chain\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langchain_text_splitters import RecursiveCharacterTextSplitter\nfrom langchain_community.document_loaders import WebBaseLoader\nfrom langchain_chroma import Chroma\n\nCOMPRESSA_API_KEY = os.getenv('COMPRESSA_API_KEY')\n"})}),"\n",(0,t.jsx)(n.p,{children:"let's define llm and embedding"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"compressa_embedding = CompressaEmbeddings(compressa_api_key=COMPRESSA_API_KEY)\nllm = ChatCompressa(compressa_api_key=COMPRESSA_API_KEY)\n"})}),"\n",(0,t.jsx)(n.p,{children:"let's define a document loader and get langchain documents.\nany of the available loaders can be used here."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'loader = WebBaseLoader("https://docs.smith.langchain.com/overview")\ndocs = loader.load()\n'})}),"\n",(0,t.jsx)(n.p,{children:"define text_splitter and split documents into chunks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"text_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=500, chunk_overlap=100, add_start_index=True\n)\nall_splits = text_splitter.split_documents(docs)\n"})}),"\n",(0,t.jsx)(n.p,{children:"load document chunks into vectorstore and define retriever"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'vectorstore = Chroma.from_documents(documents=all_splits, embedding=compressa_embedding)\nretriever = vectorstore.as_retriever(search_type="similarity", search_kwargs={"k": 5})\n'})}),"\n",(0,t.jsx)(n.p,{children:"let's define a Prompt to get answers to user questions based only on context and not on previous knowledge"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'system_template = f"""You are an assistant for question-answering tasks. \nUse the following pieces of retrieved context to answer the question. \nIf you don\'t know the answer, just say that you don\'t know. \nUse three sentences maximum and keep the answer concise."""\n\nqa_prompt = ChatPromptTemplate.from_messages([\n    ("system", system_template),\n    ("human", """Context information:\n\n        {context}\n        \n        Query: {input}\t\t\n    """),\n])\n'})}),"\n",(0,t.jsx)(n.p,{children:"let's set 2 chains: to retrieve documents on the question and to get the final answer"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"question_answer_chain = create_stuff_documents_chain(llm, qa_prompt)\n\nrag_chain = create_retrieval_chain(retriever, question_answer_chain)\n"})}),"\n",(0,t.jsx)(n.p,{children:"now we can ask a question"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'answ = rag_chain.invoke({"input": "how can langsmith help with testing?"})\nprint(answ["answer"])\n'})}),"\n",(0,t.jsx)(n.p,{children:"Note: to work better with Russian sources, prompt also needs to be written in Russian"})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>r});var t=a(6540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);